{
  "rules": {
    ".read": true,
    "presence": {
      ".write": "auth != null",
      "$userId": {
        ".write": "$userId === auth.uid"
      }
    },
    "co-editor" : {
      ".read": "auth != null",
      "$editorId": {
         "history": {
          ".read": "auth != null",
          "$revision": {
            /* Allow writing a revision as long as it doesn't already exist and  you write your auth.uid as the 'a' field. */
            ".write": "data.val() === null && newData.child('a').val() === auth.uid"
          }
        },
        "users": {
          ".read": "auth != null",
          "$userId": {
            /* You may freely modify your own user info. */
            ".write": "$userId === auth.uid"
          }
        },
        "checkpoint": {
          ".read": "auth != null",
          /* You may write a checkpoint as long as you're writing your auth.uid as the 'a' field and you
             also wrote the revision that you're checkpointing. */
          ".write": "newData.child('a').val() === auth.uid && root.child('history').child(newData.child('id').val()).child('a').val() === auth.uid"
        }   
      }
    },
    "itemEditor" : {
      ".read": "auth != null",
      "$editorId": {
         "history": {
          ".read": "auth != null",
          "$revision": {
            /* Allow writing a revision as long as it doesn't already exist and  you write your auth.uid as the 'a' field. */
            ".write": "data.val() === null && newData.child('a').val() === auth.uid"
          }
        },
        "users": {
          ".read": "auth != null",
          "$userId": {
            /* You may freely modify your own user info. */
            ".write": "$userId === auth.uid"
          }
        },
        "checkpoint": {
          ".read": "auth != null",
          /* You may write a checkpoint as long as you're writing your auth.uid as the 'a' field and you
             also wrote the revision that you're checkpointing. */
          ".write": "newData.child('a').val() === auth.uid && root.child('history').child(newData.child('id').val()).child('a').val() === auth.uid"
        }   
      }
    }
  }
}